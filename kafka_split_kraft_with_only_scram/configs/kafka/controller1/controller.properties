# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# This configuration file is intended for use in KRaft mode, where
# Apache ZooKeeper is not present.  See config/kraft/README.md for details.
#

############################# Server Basics #############################

# The role of this server. Setting this puts us in KRaft mode
process.roles=controller

# The node id associated with this instance's roles
node.id=3001

# The connect string for the controller quorum
controller.quorum.voters=3001@controller1:9093

############################# Socket Server Settings #############################

# The address the socket server listens on.
listeners=CONTROLLER://0.0.0.0:9093
advertised.listeners=CONTROLLER://controller1:9093

# Maps listener names to security protocols
listener.security.protocol.map=BROKER:SASL_SSL,CONTROLLER:SASL_SSL

# A comma-separated list of the names of the listeners used by the controller.
controller.listener.names=CONTROLLER

# How to communicate with brokers. [SASL_SSL]
inter.broker.listener.name=BROKER

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
num.network.threads=8

# The number of threads that the server uses for processing requests, which may include disk I/O
num.io.threads=8

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600

############################# Authentication #############################
# SSL settings
listener.name.controller.ssl.keystore.location=/opt/kafka/config/jks/controller1.keystore.jks
listener.name.controller.ssl.keystore.password=cagri3541
listener.name.controller.ssl.key.password=cagri3541
listener.name.controller.ssl.truststore.location=/opt/kafka/config/jks/controller1.truststore.jks
listener.name.controller.ssl.truststore.password=cagri3541

# SASL Scram Configuration
sasl.mechanism.inter.broker.protocol=SCRAM-SHA-256
sasl.mechanism.controller.protocol=SCRAM-SHA-256
sasl.enabled.mechanisms=SCRAM-SHA-256

# SASL Super User
authorizer.class.name=org.apache.kafka.metadata.authorizer.StandardAuthorizer
super.users=User:kafka
allow.everyone.if.no.acl.found=false

############################# Log Basics #############################

# A comma separated list of directories under which to store log files
log.dirs=/opt/data/kafka
metadata.log.dir=/opt/data/metadata

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours=168

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

############################# Leader Broker Policy #############################
# This setting enables controlled shutdown for Kafka brokers. When set to true,
# Kafka will try to gracefully shut down the broker by migrating the leadership 
# of partitions to other brokers before actually shutting down. 
controlled.shutdown.enable=true

############################# User Permission Policy #############################
# This setting controls whether topics can be deleted via the Kafka admin tools. 
# When set to true, Kafka allows users to delete topics.
delete.topic.enable=true
inter.broker.protocol.version=4.0